# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthType {
  token: String!
  user: User!
}

input CreateFieldInput {
  acre: String!
  imageUrl: String!
  name: String!
}

input CreateInventoryInput {
  amount: String!
  name: String!
  provider: String!
  storage: String!
  value: String
}

input CreateManyFieldsInput {
  """Array of records to create"""
  fields: [CreateFieldInput!]!
}

input CreateManyInventoriesInput {
  """Array of records to create"""
  inventories: [CreateInventoryInput!]!
}

input CreateManyProductionsInput {
  """Array of records to create"""
  productions: [CreateProductionInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOneFieldInput {
  """The record to create"""
  field: CreateFieldInput!
}

input CreateOneInventoryInput {
  """The record to create"""
  inventory: CreateInventoryInput!
}

input CreateOneProductionInput {
  """The record to create"""
  production: CreateProductionInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateProductionInput {
  amount: String!
  name: String!
}

input CreateUserInput {
  CPF: String!
  email: String!
  isActive: Boolean
  name: String!
  password: String
  telephone: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyFieldsInput {
  """Filter to find records to delete"""
  filter: FieldDeleteFilter!
}

input DeleteManyInventoriesInput {
  """Filter to find records to delete"""
  filter: InventoryDeleteFilter!
}

input DeleteManyProductionsInput {
  """Filter to find records to delete"""
  filter: ProductionDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneFieldInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInventoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type Field {
  acre: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  imageUrl: String!
  name: String!
  updatedAt: DateTime!
}

type FieldAggregateGroupBy {
  acre: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  imageUrl: String
  name: String
  updatedAt: DateTime
}

type FieldConnection {
  """Array of nodes."""
  nodes: [Field!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type FieldCountAggregate {
  acre: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  imageUrl: Int
  name: Int
  updatedAt: Int
}

input FieldDeleteFilter {
  acre: StringFieldComparison
  and: [FieldDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  imageUrl: StringFieldComparison
  name: StringFieldComparison
  or: [FieldDeleteFilter!]
  updatedAt: DateFieldComparison
}

type FieldDeleteResponse {
  acre: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  imageUrl: String
  name: String
  updatedAt: DateTime
}

input FieldFilter {
  acre: StringFieldComparison
  and: [FieldFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  imageUrl: StringFieldComparison
  name: StringFieldComparison
  or: [FieldFilter!]
  updatedAt: DateFieldComparison
}

type FieldMaxAggregate {
  acre: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  imageUrl: String
  name: String
  updatedAt: DateTime
}

type FieldMinAggregate {
  acre: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  imageUrl: String
  name: String
  updatedAt: DateTime
}

input FieldSort {
  direction: SortDirection!
  field: FieldSortFields!
  nulls: SortNulls
}

enum FieldSortFields {
  acre
  createdAt
  deletedAt
  id
  imageUrl
  name
  updatedAt
}

input FieldUpdateFilter {
  acre: StringFieldComparison
  and: [FieldUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  imageUrl: StringFieldComparison
  name: StringFieldComparison
  or: [FieldUpdateFilter!]
  updatedAt: DateFieldComparison
}

type Inventory {
  amount: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  name: String!
  provider: String!
  storage: String!
  updatedAt: DateTime!
  value: String
}

type InventoryAggregateGroupBy {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  provider: String
  storage: String
  updatedAt: DateTime
  value: String
}

type InventoryConnection {
  """Array of nodes."""
  nodes: [Inventory!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type InventoryCountAggregate {
  amount: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  provider: Int
  storage: Int
  updatedAt: Int
  value: Int
}

input InventoryDeleteFilter {
  amount: StringFieldComparison
  and: [InventoryDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [InventoryDeleteFilter!]
  provider: StringFieldComparison
  storage: StringFieldComparison
  updatedAt: DateFieldComparison
  value: StringFieldComparison
}

type InventoryDeleteResponse {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  provider: String
  storage: String
  updatedAt: DateTime
  value: String
}

input InventoryFilter {
  amount: StringFieldComparison
  and: [InventoryFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [InventoryFilter!]
  provider: StringFieldComparison
  storage: StringFieldComparison
  updatedAt: DateFieldComparison
  value: StringFieldComparison
}

type InventoryMaxAggregate {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  provider: String
  storage: String
  updatedAt: DateTime
  value: String
}

type InventoryMinAggregate {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  provider: String
  storage: String
  updatedAt: DateTime
  value: String
}

input InventorySort {
  direction: SortDirection!
  field: InventorySortFields!
  nulls: SortNulls
}

enum InventorySortFields {
  amount
  createdAt
  deletedAt
  id
  name
  provider
  storage
  updatedAt
  value
}

input InventoryUpdateFilter {
  amount: StringFieldComparison
  and: [InventoryUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [InventoryUpdateFilter!]
  provider: StringFieldComparison
  storage: StringFieldComparison
  updatedAt: DateFieldComparison
  value: StringFieldComparison
}

type Mutation {
  createManyFields(input: CreateManyFieldsInput!): [Field!]!
  createManyInventories(input: CreateManyInventoriesInput!): [Inventory!]!
  createManyProductions(input: CreateManyProductionsInput!): [Production!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneField(input: CreateOneFieldInput!): Field!
  createOneInventory(input: CreateOneInventoryInput!): Inventory!
  createOneProduction(input: CreateOneProductionInput!): Production!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyFields(input: DeleteManyFieldsInput!): DeleteManyResponse!
  deleteManyInventories(input: DeleteManyInventoriesInput!): DeleteManyResponse!
  deleteManyProductions(input: DeleteManyProductionsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneField(input: DeleteOneFieldInput!): FieldDeleteResponse!
  deleteOneInventory(input: DeleteOneInventoryInput!): InventoryDeleteResponse!
  deleteOneProduction(input: DeleteOneProductionInput!): ProductionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  loginUser(data: AuthInput!): AuthType!
  updateManyFields(input: UpdateManyFieldsInput!): UpdateManyResponse!
  updateManyInventories(input: UpdateManyInventoriesInput!): UpdateManyResponse!
  updateManyProductions(input: UpdateManyProductionsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneField(input: UpdateOneFieldInput!): Field!
  updateOneInventory(input: UpdateOneInventoryInput!): Inventory!
  updateOneProduction(input: UpdateOneProductionInput!): Production!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Production {
  amount: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type ProductionAggregateGroupBy {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type ProductionConnection {
  """Array of nodes."""
  nodes: [Production!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductionCountAggregate {
  amount: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input ProductionDeleteFilter {
  amount: StringFieldComparison
  and: [ProductionDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductionDeleteFilter!]
  updatedAt: DateFieldComparison
}

type ProductionDeleteResponse {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ProductionFilter {
  amount: StringFieldComparison
  and: [ProductionFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductionFilter!]
  updatedAt: DateFieldComparison
}

type ProductionMaxAggregate {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type ProductionMinAggregate {
  amount: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ProductionSort {
  direction: SortDirection!
  field: ProductionSortFields!
  nulls: SortNulls
}

enum ProductionSortFields {
  amount
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input ProductionUpdateFilter {
  amount: StringFieldComparison
  and: [ProductionUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductionUpdateFilter!]
  updatedAt: DateFieldComparison
}

type Query {
  field(
    """The id of the record to find."""
    id: ID!
  ): Field
  fields(
    """Specify to filter the records returned."""
    filter: FieldFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [FieldSort!] = []
  ): FieldConnection!
  getOneUser(id: String!): User!
  getUserByEmail(email: String): User!
  inventories(
    """Specify to filter the records returned."""
    filter: InventoryFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [InventorySort!] = []
  ): InventoryConnection!
  inventory(
    """The id of the record to find."""
    id: ID!
  ): Inventory
  me: User!
  production(
    """The id of the record to find."""
    id: ID!
  ): Production
  productions(
    """Specify to filter the records returned."""
    filter: ProductionFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ProductionSort!] = []
  ): ProductionConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateFieldInput {
  acre: String
  id: ID
  imageUrl: String
  name: String
}

input UpdateInventoryInput {
  amount: String
  id: ID
  name: String
  provider: String
  storage: String
  value: String
}

input UpdateManyFieldsInput {
  """Filter used to find fields to update"""
  filter: FieldUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFieldInput!
}

input UpdateManyInventoriesInput {
  """Filter used to find fields to update"""
  filter: InventoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInventoryInput!
}

input UpdateManyProductionsInput {
  """Filter used to find fields to update"""
  filter: ProductionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOneFieldInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFieldInput!
}

input UpdateOneInventoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInventoryInput!
}

input UpdateOneProductionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdateProductionInput {
  amount: String
  id: ID
  name: String
}

input UpdateUserInput {
  CPF: String
  email: String
  id: ID
  isActive: Boolean
  name: String
  password: String
  telephone: String
}

type User {
  CPF: String!
  email: String!
  id: String!
  name: String!
  telephone: String!
}

type UserAggregateGroupBy {
  CPF: String
  email: String
  name: String
  telephone: String
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  CPF: Int
  email: Int
  name: Int
  telephone: Int
}

input UserDeleteFilter {
  CPF: StringFieldComparison
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  telephone: StringFieldComparison
}

type UserDeleteResponse {
  CPF: String
  email: String
  id: String
  name: String
  telephone: String
}

input UserFilter {
  CPF: StringFieldComparison
  and: [UserFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  telephone: StringFieldComparison
}

type UserMaxAggregate {
  CPF: String
  email: String
  name: String
  telephone: String
}

type UserMinAggregate {
  CPF: String
  email: String
  name: String
  telephone: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  CPF
  email
  name
  telephone
}

input UserUpdateFilter {
  CPF: StringFieldComparison
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  telephone: StringFieldComparison
}
